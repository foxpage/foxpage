// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`builder-condition-edit-drawer match snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(EditDrawer)
    applicationId="appl_uagWz8CC8WxD3Ux"
    folderId="fold_kPrzikuRoPxg9gg"
  >
    <EditDrawer
      applicationId="appl_uagWz8CC8WxD3Ux"
      closeDrawer={[Function]}
      condition={
        Object {
          "content": Object {
            "id": "cont_APzkN2w9iKrGTax",
            "schemas": Array [
              Object {
                "children": Array [
                  Object {
                    "props": Object {
                      "key": "erere",
                      "operation": "eq",
                      "value": "",
                    },
                    "type": "condition.expression",
                  },
                ],
                "name": "erererer",
                "type": 1,
              },
            ],
          },
          "contentId": "cont_APzkN2w9iKrGTax",
          "id": "file_7MZBki3jQDNZ8oC",
          "name": "erererer",
          "type": "condition",
        }
      }
      drawerType="edit"
      folderId="fold_kPrzikuRoPxg9gg"
      saveCondition={[Function]}
      updateCondition={[Function]}
      visible={true}
    >
      <OperationDrawer
        actions={
          <Button
            onClick={[Function]}
            type="primary"
          >
            Apply
          </Button>
        }
        anchor="right"
        canExpend={false}
        destroyOnClose={true}
        maskClosable={true}
        onClose={[Function]}
        open={true}
        title="Edit"
        width={550}
      >
        <Styled(DrawerWrapper)
          closable={false}
          destroyOnClose={true}
          key="aeFbyDQd0um"
          maskClosable={true}
          onClose={[Function]}
          placement="right"
          visible={false}
          width={550}
        >
          <DrawerWrapper
            className="sc-gsDKAQ lbnDNM"
            closable={false}
            destroyOnClose={true}
            maskClosable={true}
            onClose={[Function]}
            placement="right"
            visible={false}
            width={550}
          >
            <Drawer
              className="sc-gsDKAQ lbnDNM"
              closable={false}
              destroyOnClose={true}
              maskClosable={true}
              onClose={[Function]}
              placement="right"
              prefixCls="ant-drawer"
              visible={false}
              width={550}
            >
              <DrawerWrapper
                afterVisibleChange={[Function]}
                autoFocus={true}
                className="sc-gsDKAQ lbnDNM"
                defaultOpen={false}
                duration=".3s"
                ease="cubic-bezier(0.78, 0.14, 0.15, 0.86)"
                forceRender={false}
                getContainer="body"
                handler={false}
                keyboard={true}
                level={null}
                maskClosable={true}
                maskStyle={Object {}}
                onChange={[Function]}
                onClose={[Function]}
                open={false}
                placement="right"
                prefixCls="ant-drawer"
                showMask={true}
                style={
                  Object {
                    "transform": undefined,
                    "zIndex": undefined,
                  }
                }
                width={550}
                wrapperClassName=""
              >
                <PortalWrapper
                  forceRender={false}
                  getContainer="body"
                  visible={false}
                  wrapperClassName=""
                />
              </DrawerWrapper>
            </Drawer>
          </DrawerWrapper>
        </Styled(DrawerWrapper)>
      </OperationDrawer>
    </EditDrawer>
  </Connect(EditDrawer)>
</Provider>
`;
